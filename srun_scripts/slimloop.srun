#!/bin/bash
#SBATCH --account=kernlab          ### SLURM account which will be charged for the job
#SBATCH --partition=kern        ### Partition (like a queue in PBS)
#SBATCH --job-name=slimloop      ### Job Name
#SBATCH --output=slimloop.out         ### File in which to store job output
#SBATCH --error=slimloop.err          ### File in which to store job error messages
#SBATCH --time=0-01:00:00       ### Wall clock time limit in Days-HH:MM:SS
#SBATCH --nodes=1               ### Node count required for the job
#SBATCH --ntasks-per-node=1     ### Nuber of tasks to be launched per Node
#SBATCH --cpus-per-task=1       ### Number of cpus (cores) per task
datadir="/home/vcaudill/kernlab/coevo/MSprome_sim" # where the file will be 
snake_mu_rate=( 1e-6 1e-8 1e-10 1e-12 1e-6 1e-8 1e-10 1e-12 1e-6 1e-8 1e-10 1e-12 1e-6 1e-8 1e-10 1e-12)
newt_mu_rate=( 1e-6 1e-8 1e-10 1e-12)  # does this need to be 50 times more than the snake?
snake_mu_effect_sd=( 0.01 0.01 0.01 0.01 0.05 0.05 0.05 0.05 0.25 0.25 0.25 0.25 0.5 0.5 0.5 0.5)
newt_mu_effect_sd=( 0.01 0.05 0.25 0.5)

#for i in {1..16};
for i in 1;
do for j in "${newt_mu_rate[@]}";
do for k in "${newt_mu_effect_sd[@]}";
do myfile="${datadir}/both_su_${snake_mu_rate[i-1]}_nu_${j}_sue_${snake_mu_effect_sd[i-1]}_nue_${k}.init.trees"
FN=$(openssl rand 4 | od -DAn)
namebase="su_${snake_mu_rate[i-1]}_nu_${j}_sue_${snake_mu_effect_sd[i-1]}_nue_${k}"
treename="/home/vcaudill/kernlab/coevo/Expdata/tree_files/"

sbatch runslim.srun ${snake_mu_rate[i-1]} ${j} ${snake_mu_effect_sd[i-1]} ${k/snake_mu_effect_sd[i-1]} ${myfile} ${treename} ${namebase} ${FN} 
done; done; done