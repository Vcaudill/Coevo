initialize() {
	
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	sigma_i = 1; // area for individulas to mate with might condider 2
	recomb=1e-8;
	sigma_in = 0.5; // i want more of a decrease in fitness when there are too many neighbors!
	
	defineConstant("sigma_M", 0.33); // the meeting interaction term
	defineConstant("K", 1);  // carrying-capacity per unit square (roughly)
	defineConstant("SD", sigma_in);  // sigma_D, the dispersal distance
	defineConstant("SI", sigma_in);  // sigma_I, the spatial interaction distance
	defineConstant("SM", SI);  // sigma_M, the mate choice distance
	defineConstant("L", 4);    // mean lifetime at stationarity
	defineConstant("W", 35.0);  // width and height of the simulated area
	defineConstant("G", 1e8);  // genome length
	defineConstant("FECUN", 1/(L)); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
	
	initializeMutationType("m1", 0.5, "n", 0.0, 1.0);
	initializeMutationType("m2", 0.5, "n", 0.0, 1.0);
	initializeGenomicElementType("g1", c(m1, m2), c(1, 1)); // mutation proportions
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(1e-8);
	initializeRecombinationRate(recomb);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3); //Distance
	i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
	
	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
	i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

// to make the mutions truly neutral?
fitness(m1) { return 1.0; }
fitness(m2) { return 1.0; }


//why does it avoid the bottom left corner?
reproduction(p1) {
	// choose our nearest neighbor as a mate, within the max distance
	// How to do this by sub-population 
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD); // add dispersal
			if (p1.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(p1.pointReflected(pos));
			}
		}
	}
	return;
}

reproduction(p2) {
	// choose our nearest neighbor as a mate, within the max distance
	// How to do this by sub-population 
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD); // add dispersal
			if (p2.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(p2.pointReflected(pos));
			}
		}
	}
	return;
}


1 early() {
	sim.addSubpop("p1", asInteger(K * W * W));
	sim.addSubpop("p2", asInteger(K * W * W));
	p1.setSpatialBounds(c(0, 0, W, W));
	p2.setSpatialBounds(c(0, 0, W, W));
	// would it be better to add them on the same plot
	// random initial positions
	for (ind in p1.individuals) {
		ind.setSpatialPosition(p1.pointUniform());
	}
	for (ind in p2.individuals) {
		ind.setSpatialPosition(p2.pointUniform());
	}
	i1.evaluate();
}


early() {
	
	// removing mutations that apear in the wrong population
	muts1 = sim.mutationsOfType(m1);  // newt mutations
	muts2 = sim.mutationsOfType(m2); // snake mutations
	p1.individuals.genomes.removeMutations(muts2);
	p2.individuals.genomes.removeMutations(muts1);
}



early() { //competition within and between populations
	// pre-calculate adult density matrix to relate the populations posion/resistance levels and do competetion within a population 
	i1.evaluate(p1);
	i2.evaluate(p2);
	inds_n = p1.individuals;
	inds_s = p2.individuals;
	
	newt_competition = i1.totalOfNeighborStrengths(inds_n);
	snake_competition = i2.totalOfNeighborStrengths(inds_s);
	
	// caculating the phenotype, but usinf the exponet to only have postive phenotypes
	phenotypes_n = exp(inds_n.sumOfMutationsOfType(m1)/10);
	phenotypes_s = exp(inds_s.sumOfMutationsOfType(m2)/10);
	
	// construct phenotypes and fitness effects from QTLs 
	inds_n.z = phenotypes_n;
	inds_s.z = phenotypes_s;
	
	
	inds_n.fitnessScaling = pmin(0.95, 1/(1 + RHO * newt_competition));
	inds_s.fitnessScaling = pmin(0.95, 1/(1 + RHO * snake_competition));
	
	
	// avoid edge effects
	inds_n.fitnessScaling = inds_n.fitnessScaling * pmin(sqrt(inds_n.x/SI), 1.0) * pmin(sqrt(inds_n.y/SI), 1.0) * pmin(sqrt((W - inds_n.x)/SI), 1.0) * pmin(sqrt((W - inds_n.y)/SI), 1.0); // * effects
	inds_s.fitnessScaling = inds_s.fitnessScaling * pmin(sqrt(inds_s.x/SI), 1.0) * pmin(sqrt(inds_s.y/SI), 1.0) * pmin(sqrt((W - inds_s.x)/SI), 1.0) * pmin(sqrt((W - inds_s.y)/SI), 1.0);
	
	
	//Snake and Newt 1on1 interaction how do i do an interaction from nearby????
	meet = sample(seqLen(p1.individualCount), p2.individualCount, replace=T); //get the snakes that find a newt
	outcome = exp(-(((phenotypes_s - phenotypes_n[meet])/sigma_M)^2)/2); //defining the outcome where snake might die if newt is more toxic but I also want the newt to increase in toxin if they are more toxic than the snake can handel
	outcome_n = rep(0.0, p1.individualCount);
	for (j in seqLen(p1.individualCount)) {
		outcome_n[j] = sum(1 - outcome[meet == j]);
		//cat(format("%6.2f ", outcome_p[j]));
		if (outcome_n[j] <= -1.0) { catn("Whoops!: fitness scaling will be " + (1.0 + outcome_n[j]) + " because outcome[infects == j] is:"); catn(outcome[meet == j]); }
	}
	
	//fitness based off compitention within species and with the random interactions
	//Some other problems here
	inds_s.fitnessScaling = inds_s.fitnessScaling * outcome; //snake
	inds_n.fitnessScaling = inds_n.fitnessScaling + outcome_n; //newt 

}

//Create the different selection areas 

1: late() {
	// to be ready for mate choice
	i2.evaluate(p1);
	i2.evaluate(p2);
}





1000 late() {
	sim.simulationFinished();
}
