initialize() {
	
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	sigma_i = 1; // area for individulas to mate with might condider 2
	recomb=1e-8;
	
	defineConstant("K", 3);  // carrying-capacity per unit square (roughly)
	defineConstant("SD", sigma_i);  // sigma_D, the dispersal distance
	defineConstant("SI", sigma_i);  // sigma_I, the spatial interaction distance
	defineConstant("SM", SI);  // sigma_M, the mate choice distance
	defineConstant("L", 4);    // mean lifetime at stationarity
	defineConstant("W", 35.0);  // width and height of the simulated area
	defineConstant("G", 1e8);  // genome length
	defineConstant("FECUN", 1/L); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
	
	initializeMutationType("m1", 0.5, "n", 0.0, 1.0);
	initializeMutationType("m2", 0.5, "n", 0.0, 1.0);
	initializeGenomicElementType("g1", c(m1, m2), c(1, 1)); // mutation proportions
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(1e-8);
	initializeRecombinationRate(recomb);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3); //Distance
	i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
	
	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
	i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);

}

// to make the mutions truly neutral?
fitness(m1) { return 1.0; }
fitness(m2) { return 1.0; }


//why does it avoid the bottom left corner?
reproduction(p1) {
	// choose our nearest neighbor as a mate, within the max distance
	// How to do this by sub-population 
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD); // add dispersal
			if (p1.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(p1.pointReflected(pos));
			}
		}
	}
	return;
}

reproduction(p2) {
	// choose our nearest neighbor as a mate, within the max distance
	// How to do this by sub-population 
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, 0, SD); // add dispersal
			if (p2.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(p2.pointReflected(pos));
			}
		}
	}
	return;
}


1 early() {
	sim.addSubpop("p1", asInteger(K * W * W));
	sim.addSubpop("p2", asInteger(K * W * W));
	p1.setSpatialBounds(c(0, 0, W, W));
	p2.setSpatialBounds(c(0, 0, W, W));
	// would it be better to add them on the same plot
	// random initial positions
	for (ind in p1.individuals) {
		ind.setSpatialPosition(p1.pointUniform());
	}
	for (ind in p2.individuals) {
		ind.setSpatialPosition(p2.pointUniform());
	}
	i1.evaluate();
}


early() {
	
	// removing mutations that apear in the wrong population
	muts1 = sim.mutationsOfType(m1);  // newt mutations
	muts2 = sim.mutationsOfType(m2); // snake mutations
	p1.individuals.genomes.removeMutations(muts2);
	p2.individuals.genomes.removeMutations(muts1);
}


//update competition to be density dependent for the combo of both populations
//early() { //competition within newt popultation
//	i1.evaluate(p1);
//	inds = p1.individuals; // would sim.individuals work
//	competition = i1.totalOfNeighborStrengths(inds);
//	inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));
//	// avoid edge effects
//	inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0); // corner is bad
//}

//early() { //competition within snake population
//	i2.evaluate(p2);
//	inds = p2.individuals;
//	competition = i2.totalOfNeighborStrengths(inds);
//	inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));
//	// avoid edge effects
//	inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0); // corner is bad
//}


//loop over newts to get their postions
//compute a map of local snake density
//if there are lots of snakes newts are in trouble

//would this be reversed for snakes? like more newts = full snakes

//but what about posion levels? like if all the newts near are unable to be eaten?


early() { //competition	// pre-calculate adult density matrix to relate the populations posion/resistance levels and do competetion within a population 
	i1.evaluate(p1);
	i2.evaluate(p2);
	inds_n = p1.individuals;
	inds_s = p2.individuals;
	
	newt_competition = i1.totalOfNeighborStrengths(inds_n);
	snake_competition = i2.totalOfNeighborStrengths(inds_s);
	
	phenotypes_n = exp(inds_n.sumOfMutationsOfType(m1)/10); //no neagtive phenotype
	phenotypes_s = exp(inds_s.sumOfMutationsOfType(m2)/10);
	
	inds_n.fitnessScaling = pmin(0.95, 1/(1 + RHO * newt_competition));
	inds_s.fitnessScaling = pmin(0.95, 1/(1 + RHO * snake_competition));
	// avoid edge effects
	inds_n.fitnessScaling = inds_n.fitnessScaling * pmin(sqrt(inds_n.x/SI), 1.0) * pmin(sqrt(inds_n.y/SI), 1.0) * pmin(sqrt((W - inds_n.x)/SI), 1.0) * pmin(sqrt((W - inds_n.y)/SI), 1.0);
	inds_s.fitnessScaling = inds_s.fitnessScaling * pmin(sqrt(inds_s.x/SI), 1.0) * pmin(sqrt(inds_s.y/SI), 1.0) * pmin(sqrt((W - inds_s.x)/SI), 1.0) * pmin(sqrt((W - inds_s.y)/SI), 1.0);
	
	bounds = p2.spatialBounds;
	m = float(100);
	n = float(100);
	i = 0;
	for (y in seq(from=bounds[1], to=bounds[3], length=10))
	{
		for (x in seq(from=bounds[0], to=bounds[2], length=10))
		{
			mPoint = c(x,y);
			
			snakeNeighbors = i2.nearestNeighborsOfPoint(p2, mPoint, count=1000000);
			newtNeighbors = i1.nearestNeighborsOfPoint(p1, mPoint, count=1000000);
			
			snakedistances = i2.distanceToPoint(snakeNeighbors, mPoint); //far they are from point
			newtdistances = i1.distanceToPoint(newtNeighbors, mPoint); //far they are from point
			
			snakestrengths = dnorm(snakedistances, mean=0.0, sd=0.1); //sd 1/4 dis between points
			newtstrengths = dnorm(newtdistances, mean=0.0, sd=0.1); //sd 1/4 dis between points
			
			//catn(phenotypes_s[snakeNeighbors.index]);/// problem i want to know the phenotype of the snakes 
			snake_pheno_strength = snakestrengths * phenotypes_s[snakeNeighbors.index];// strength * posion phonotype
			newt_pheno_strength = newtstrengths * phenotypes_n[newtNeighbors.index];// strength * posion phonotype 
			
			snake_density = sum(snake_pheno_strength);
			newt_density = sum(newt_pheno_strength);
			
			m[i] = snake_density;
			n[i] = newt_density;
			i = i + 1;
		}
	}
	p1.defineSpatialMap("snakedensity", "xy", c(10,10), m, interpolate=T);
	p2.defineSpatialMap("newtdensity", "xy", c(10,10), n, interpolate=T);
	
	for (ind in p1.individuals) {
		snake_res_density = p1.spatialMapValue("snakedensity", ind.spatialPosition); //ind p1.individuals
		//e^-x slopes down
		ind.fitnessScaling = ind.fitnessScaling * exp(- (snake_res_density)); //the fitness goes down as snake resistance goes up 
				
		// is make somthing like a probablity of the newt dying if there are a lot of snakes near by with high resistance 
	
	}
	for (ind in p2.individuals) {
		newt_res_density = p2.spatialMapValue("newtdensity", ind.spatialPosition);
		//e^-x slopes down
		ind.fitnessScaling = ind.fitnessScaling * exp(- (newt_res_density)); //the fitness goes down as newt posion goes up 
	
	
	}
}



//Create the different selection areas 

1: late() {
	// to be ready for mate choice
	i2.evaluate(p1);
	i2.evaluate(p2);
}



//2: late() {
//	//for coloring it would be cool to see the phenotype
//	for (ind in p1.individuals) {
//		ind.color = "blue";
//	}
//	for (ind in p2.individuals) {
//		ind.color = "red";
//	}
//}


1000 late() {
	sim.simulationFinished();
}
