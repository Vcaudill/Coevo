//This sumlation is to test how i am caculating the decendents by having slim collect data and graphing it 

initialize() {
	setSeed(1614334322478);
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy");
	initializeTreeSeq();
	
	//outpath="/Users/victoria/Desktop/test.slim";
	// this output doesnt work with the later output, why? - becasue it needs tto be defined as a constant...
	defineConstant("outpath", "/Users/victoria/Desktop/bias_test_data/");
	sigma_i=1;
	
	recomb=1e-8;
	
	defineConstant("K", 5);  // carrying-capacity per unit square (roughly)
	//defineConstant("K", 10);
	defineConstant("SD", sigma_i);  // sigma_D, the dispersal distance
	defineConstant("SI", sigma_i);  // sigma_I, the spatial interaction distance
	defineConstant("SM", SI);  // sigma_M, the mate choice distance
	defineConstant("L", 4);    // mean lifetime at stationarity
	defineConstant("W", 35.0);  // width and height of the simulated area
	defineConstant("G", 1e8);  // genome length
	defineConstant("FECUN", 1/L); // mean fecundity
	defineConstant("RHO", FECUN/((1+FECUN) * K)); // constant in spatial competition function
	
	defineConstant("BIAS", 1);  // bias on dispersal (towards North East)
	
	initializeMutationType("m1", 0.5, "g", 0.0, 2);
	initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, G-1);
	initializeMutationRate(0.0);
	initializeRecombinationRate(recomb);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=SI * 3);
	i1.setInteractionFunction("n", 1.0/(2*PI*SI^2), SI);
	
	// mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=SM * 3);
	i2.setInteractionFunction("n", 1.0/(2*PI*SM^2), SM);
	
	defineConstant("simID", getSeed());
	//sim.addSubpop("p9", 3);  

}

reproduction() {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.drawByStrength(individual, 1);
	if (mate.size()) {
		nOff = rpois(1, FECUN);
		individual.tag = individual.tag + nOff;  // DEBUG
		for (i in seqLen(nOff)) {
			pos = individual.spatialPosition + rnorm(2, BIAS, SD); // add biased dispersal
			if (p1.pointInBounds(pos)) {
				offspring = subpop.addCrossed(individual, mate);
				offspring.setSpatialPosition(p1.pointReflected(pos));
				offspring.tag = 0; // DEBUG
				offspring.setValue("inheritance", individual.getValue("inheritance") + mate.getValue("inheritance"));
			}
		}
	}
	return;
}

1 early() {
	sim.addSubpop("p1", 10);
	p1.setSpatialBounds(c(0, 0, W, W));
	// random initial positions
	for (ind in p1.individuals) {
		ind.setSpatialPosition(p1.pointUniform());
		ind.tag = 0; // DEBUG
	}
	i1.evaluate();
	// header info
	cat("gen" + "	" + "decdents");
	catn();
	zeros = rep(0, p1.individualCount);
	for (k in seqLen(p1.individualCount)) {
		ind = p1.individuals[k];
		x = zeros;
		x[k] = 1;
		ind.setValue("inheritance", x);
	}


}
//try doing everthing in early
// try having slim print out parents and what gen it happens
early() { //competition
	i1.evaluate(p1);
	inds = p1.individuals;
	competition = i1.totalOfNeighborStrengths(inds);
	inds.tagF = competition;  // DEBUG
	inds.fitnessScaling = pmin(0.95, 1/(1 + RHO * competition));
	// avoid edge effects
	inds.fitnessScaling = inds.fitnessScaling * pmin(sqrt(inds.x/SI), 1.0) * pmin(sqrt(inds.y/SI), 1.0) * pmin(sqrt((W - inds.x)/SI), 1.0) * pmin(sqrt((W - inds.y)/SI), 1.0); // corner is bad
	
	catn();
	cat(sim.generation);
	cat("	");
	zeros = rep(0, 10); //asInteger(K * W * W)
	if (sim.generation == 1) {
		//remeber ancestry of each individual
		sim.treeSeqRememberIndividuals(sim.subpopulations.individuals); // starting from the first gen
		writeFile(outpath+"loc_Bias_"+BIAS+ "_sigma_"+SD+ "_ID_"+simID + "_late_10" + ".txt", "loc_x	loc_y",append=T);
		for (ind in sim.subpopulations.individuals){
			spot_x = asString(ind.x);
			spot_y = asString(ind.y);
			writeFile(outpath+"loc_Bias_"+BIAS+ "_sigma_"+SD+ "_ID_"+simID + "_late_10" + ".txt", spot_x+" "+spot_y,append=T);
		}
		writeFile(outpath+"des_Bias_"+BIAS+ "_sigma_"+SD+ "_ID_"+simID + "_late_10" + ".txt", "gen    descendants",append=T);
		
		
		for (ind in sim.subpopulations.individuals){
			//sum the vectors 
			zeros = zeros + ind.getValue("inheritance");
			//catn(new);
		}
		cat(zeros);
		writeFile(outpath+"des_Bias_"+BIAS+ "_sigma_"+SD+ "_ID_"+simID + "_late_10" + ".txt", asString(sim.generation)+"    "+paste(asString(zeros), sep=" "),append=T);
	}
}

1: late() {
	// to be ready for mate choice
	i2.evaluate(p1);
	//remeber ancestry of each individual
	//sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);//why is this in late and will it change things?
}


2: early() {
	if ((sim.generation % 20) == 0) {
		cat(sim.generation + " " + "early" + " " + mean(p1.individuals.age) + " " + p1.individualCount/W^2);
		cat(" " + mean(p1.individuals.tagF) + " " + 1/mean(1/p1.individuals.tagF) + " " + mean(p1.individuals.tag)+" "+var(p1.individuals.tag));
		catn(" " + clock());
	}
}

2: late() {
	
	
	if ((sim.generation % 20) == 0) {
		cat(sim.generation + " " + "late " + " " + mean(p1.individuals.age) + " " + p1.individualCount/W^2);
		cat(" " + mean(p1.individuals.tagF) + " " + 1/mean(1/p1.individuals.tagF) + " " + mean(p1.individuals.tag)+" "+var(p1.individuals.tag));
		catn(" " + clock());
	}
	
	// DEBUG: GUI COLORS
	//green = many neighbors, few offspring so far
	//red = many offspring so far, few neighbors
	//yellow = many offspring so far, many neighbors
	max_n = max(1, max(p1.individuals.tag));
	max_f = max(0.01, max(p1.individuals.tagF));
	max_a = max(p1.individuals.age);
	for (ind in p1.individuals) {
		ind.color = rgb2color(c(ind.tag/max_n, ind.tagF/max_f, ind.age/max_a));
	}
	
	zeros = rep(0, 10); //asInteger(K * W * W)
	if (sim.generation != 1) {
		for (ind in sim.subpopulations.individuals){
			//sum the vectors 
			zeros = zeros + ind.getValue("inheritance");
			//catn(new);
		}
		cat(zeros);
		writeFile(outpath+"des_Bias_"+BIAS+ "_sigma_"+SD+ "_ID_"+simID + "_late_10" + ".txt", asString(sim.generation)+"    "+paste(asString(zeros), sep=" "),append=T);
	}
	//remeber ancestry of each individual
	sim.treeSeqRememberIndividuals(sim.subpopulations.individuals);//why is this in late and will it change things?
}

10 late() {
	sim.treeSeqOutput(outpath+"test_Bias_"+BIAS+ "_sigma_"+SD+ "_ID_"+simID + "_late_"+asString(sim.generation) + "_.trees");
	//sim.treeSeqOutput(outpath);
	sim.simulationFinished();
}
